/// <reference types="react" />
import { ColorMode, useChakra } from "@chakra-ui/system";
import { CreateToastOptions, ToastMethods, ToastProviderProps } from "./toast.provider";
import { ToastId, ToastMessage } from "./toast.types";
import { UseToastOptions } from "./use-toast";
export interface CreateStandAloneToastParam extends Partial<ReturnType<typeof useChakra> & {
    setColorMode: (value: ColorMode) => void;
    defaultOptions: UseToastOptions;
}>, Omit<ToastProviderProps, "children"> {
}
export interface CallableToastMethods extends ToastMethods {
    (message: ToastMessage, options?: CreateToastOptions): void;
}
export declare const defaultStandaloneParam: CreateStandAloneToastParam & Required<Omit<CreateStandAloneToastParam, keyof ToastProviderProps>>;
/**
 * Create a toast
 */
export declare function createStandaloneToast({ theme, colorMode, toggleColorMode, setColorMode, defaultOptions, motionVariants, toastSpacing, component, }?: CreateStandAloneToastParam): {
    ToastContainer: () => JSX.Element;
    toast: {
        (options?: UseToastOptions | undefined): ToastId | undefined;
        /**
         * Toasts can only be updated if they have a valid id
         */
        update(id: ToastId, options: Omit<UseToastOptions, "id">): void;
        notify: (() => void) | ((message: ToastMessage, options?: Partial<Pick<import("./toast.types").ToastOptions, "position" | "id" | "status" | "duration" | "onCloseComplete" | "containerStyle">> | undefined) => ToastId);
        closeAll: (options?: import("./toast.types").CloseAllToastsOptions | undefined) => void;
        close: (id: ToastId) => void;
        isActive: (() => void) | ((id: ToastId) => boolean);
    };
};
//# sourceMappingURL=create-standalone-toast.d.ts.map