import { Variants } from "framer-motion";
import type { CSSProperties } from "react";
import * as React from "react";
import { ToastComponentProps } from "./toast.component";
import type { CloseAllToastsOptions, ToastId, ToastMessage, ToastOptions } from "./toast.types";
import type { UseToastOptions } from "./use-toast";
export interface ToastMethods {
    notify: (message: ToastMessage, options?: CreateToastOptions) => ToastId;
    closeAll: (options?: CloseAllToastsOptions) => void;
    close: (id: ToastId) => void;
    update: (id: ToastId, options: CreateToastOptions & {
        message?: ToastMessage;
    }) => void;
    isActive: (id: ToastId) => boolean;
}
export declare type CreateToastOptions = Partial<Pick<ToastOptions, "status" | "duration" | "position" | "id" | "onCloseComplete" | "containerStyle">>;
declare const useToastManager: () => ToastMethods;
export { useToastManager };
export declare type ToastProviderProps = React.PropsWithChildren<{
    /**
     * Default options for `useToast(options)`
     *
     * @example
     * <ToastProvider defaultOptions={{ duration: 10_000, isClosable: true }} />
     */
    defaultOptions?: UseToastOptions;
    /**
     * Customize the default motion config to animate the toasts your way
     *
     * @example
     * const motionVariants =
     * <ToastProvider motionVariants={motionVariants} />
     */
    motionVariants?: Variants;
    /**
     * Are you looking for a way to style the toast? Use a custom `Alert` variant in the theme.
     * This property overrides the default ToastComponent with your own implementation.
     *
     * @example
     * const CustomToastComponent = (props: ToastComponentProps) => ...
     * <ToastProvider component={CustomToastComponent} />
     *
     * @default ToastComponent
     */
    component?: React.FC<ToastComponentProps>;
    /**
     * Define the margin between toasts
     *
     * @default 0.5rem
     */
    toastSpacing?: CSSProperties["margin"];
}>;
/**
 * Manages the creation, and removal of toasts
 * across all corners ("top", "bottom", etc.)
 */
export declare const ToastProvider: React.ForwardRefExoticComponent<{
    /**
     * Default options for `useToast(options)`
     *
     * @example
     * <ToastProvider defaultOptions={{ duration: 10_000, isClosable: true }} />
     */
    defaultOptions?: UseToastOptions | undefined;
    /**
     * Customize the default motion config to animate the toasts your way
     *
     * @example
     * const motionVariants =
     * <ToastProvider motionVariants={motionVariants} />
     */
    motionVariants?: Variants | undefined;
    /**
     * Are you looking for a way to style the toast? Use a custom `Alert` variant in the theme.
     * This property overrides the default ToastComponent with your own implementation.
     *
     * @example
     * const CustomToastComponent = (props: ToastComponentProps) => ...
     * <ToastProvider component={CustomToastComponent} />
     *
     * @default ToastComponent
     */
    component?: React.FC<ToastComponentProps> | undefined;
    /**
     * Define the margin between toasts
     *
     * @default 0.5rem
     */
    toastSpacing?: CSSProperties["margin"];
} & {
    children?: React.ReactNode;
} & React.RefAttributes<ToastMethods>>;
//# sourceMappingURL=toast.provider.d.ts.map